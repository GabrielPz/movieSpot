/* tslint:disable */
/* eslint-disable */
/**
 * Cyclop APIs
 * Welcome to the Cyclop API service\'s documentation. You can play around with the different API endpoints to familiarise yourself with. --- **Release notes:**   * Improvments in CI/CD   * Platform endpoint   * Update password endpoint   * Profiles Endpoint   * JWT token revogation    * Test coverage improvment 10% - 20%   * Unit tests fix 
 *
 * The version of the OpenAPI document: {version}
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { Register } from '../models';
// @ts-ignore
import { UpdatePassword } from '../models';
// @ts-ignore
import { UserAccess } from '../models';
/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Access for trace platform
         * @param {UserAccess} body Platform user (username/password) to generate the token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAuthToken: async (body: UserAccess, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('generateAuthToken', 'body', body)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new user on trace platform
         * @param {Register} body User details (username/password) and platformId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser: async (body: Register, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('registerUser', 'body', body)
            const localVarPath = `/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update password to access cyclop platform
         * @param {UpdatePassword} body Platform user (username/password/newPassword) to update the password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword: async (body: UpdatePassword, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updatePassword', 'body', body)
            const localVarPath = `/updatePassword`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Access for trace platform
         * @param {UserAccess} body Platform user (username/password) to generate the token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateAuthToken(body: UserAccess, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateAuthToken(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.generateAuthToken']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create new user on trace platform
         * @param {Register} body User details (username/password) and platformId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerUser(body: Register, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerUser(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.registerUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update password to access cyclop platform
         * @param {UpdatePassword} body Platform user (username/password/newPassword) to update the password
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePassword(body: UpdatePassword, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePassword(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.updatePassword']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Access for trace platform
         * @param {AuthApiGenerateAuthTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateAuthToken(requestParameters: AuthApiGenerateAuthTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.generateAuthToken(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new user on trace platform
         * @param {AuthApiRegisterUserRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerUser(requestParameters: AuthApiRegisterUserRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.registerUser(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update password to access cyclop platform
         * @param {AuthApiUpdatePasswordRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePassword(requestParameters: AuthApiUpdatePasswordRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePassword(requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for generateAuthToken operation in AuthApi.
 * @export
 * @interface AuthApiGenerateAuthTokenRequest
 */
export interface AuthApiGenerateAuthTokenRequest {
    /**
     * Platform user (username/password) to generate the token
     * @type {UserAccess}
     * @memberof AuthApiGenerateAuthToken
     */
    readonly body: UserAccess
}

/**
 * Request parameters for registerUser operation in AuthApi.
 * @export
 * @interface AuthApiRegisterUserRequest
 */
export interface AuthApiRegisterUserRequest {
    /**
     * User details (username/password) and platformId
     * @type {Register}
     * @memberof AuthApiRegisterUser
     */
    readonly body: Register
}

/**
 * Request parameters for updatePassword operation in AuthApi.
 * @export
 * @interface AuthApiUpdatePasswordRequest
 */
export interface AuthApiUpdatePasswordRequest {
    /**
     * Platform user (username/password/newPassword) to update the password
     * @type {UpdatePassword}
     * @memberof AuthApiUpdatePassword
     */
    readonly body: UpdatePassword
}

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Access for trace platform
     * @param {AuthApiGenerateAuthTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public generateAuthToken(requestParameters: AuthApiGenerateAuthTokenRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).generateAuthToken(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new user on trace platform
     * @param {AuthApiRegisterUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public registerUser(requestParameters: AuthApiRegisterUserRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).registerUser(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update password to access cyclop platform
     * @param {AuthApiUpdatePasswordRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public updatePassword(requestParameters: AuthApiUpdatePasswordRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).updatePassword(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

