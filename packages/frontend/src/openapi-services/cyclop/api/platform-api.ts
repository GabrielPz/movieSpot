/* tslint:disable */
/* eslint-disable */
/**
 * Cyclop APIs
 * Welcome to the Cyclop API service\'s documentation. You can play around with the different API endpoints to familiarise yourself with. --- **Release notes:**   * Improvments in CI/CD   * Platform endpoint   * Update password endpoint   * Profiles Endpoint   * JWT token revogation    * Test coverage improvment 10% - 20%   * Unit tests fix 
 *
 * The version of the OpenAPI document: {version}
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ApiResponse } from '../models';
// @ts-ignore
import { Platform } from '../models';
/**
 * PlatformApi - axios parameter creator
 * @export
 */
export const PlatformApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create new Platform to cyclop backend
         * @param {Platform} body Platform object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlatform: async (body: Platform, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createPlatform', 'body', body)
            const localVarPath = `/document/platform`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns platforms
         * @summary Get all Platform
         * @param {string} pageNum page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlatforms: async (pageNum: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageNum' is not null or undefined
            assertParamExists('getAllPlatforms', 'pageNum', pageNum)
            const localVarPath = `/document/platforms/{pageNum}`
                .replace(`{${"pageNum"}}`, encodeURIComponent(String(pageNum)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns platforms
         * @summary Get all Platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlatformsWithoutPagination: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/document/platforms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Platform to cyclop backend
         * @param {string} platformId platformId
         * @param {Platform} body Platform object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlatform: async (platformId: string, body: Platform, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'platformId' is not null or undefined
            assertParamExists('updatePlatform', 'platformId', platformId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updatePlatform', 'body', body)
            const localVarPath = `/document/platform/{platformId}`
                .replace(`{${"platformId"}}`, encodeURIComponent(String(platformId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PlatformApi - functional programming interface
 * @export
 */
export const PlatformApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PlatformApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create new Platform to cyclop backend
         * @param {Platform} body Platform object that needs to be added
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlatform(body: Platform, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlatform(body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlatformApi.createPlatform']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns platforms
         * @summary Get all Platform
         * @param {string} pageNum page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPlatforms(pageNum: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPlatforms(pageNum, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlatformApi.getAllPlatforms']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Returns platforms
         * @summary Get all Platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllPlatformsWithoutPagination(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllPlatformsWithoutPagination(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlatformApi.getAllPlatformsWithoutPagination']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update Platform to cyclop backend
         * @param {string} platformId platformId
         * @param {Platform} body Platform object that needs to be updated
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePlatform(platformId: string, body: Platform, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePlatform(platformId, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PlatformApi.updatePlatform']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PlatformApi - factory interface
 * @export
 */
export const PlatformApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PlatformApiFp(configuration)
    return {
        /**
         * 
         * @summary Create new Platform to cyclop backend
         * @param {PlatformApiCreatePlatformRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlatform(requestParameters: PlatformApiCreatePlatformRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createPlatform(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns platforms
         * @summary Get all Platform
         * @param {PlatformApiGetAllPlatformsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlatforms(requestParameters: PlatformApiGetAllPlatformsRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponse> {
            return localVarFp.getAllPlatforms(requestParameters.pageNum, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns platforms
         * @summary Get all Platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllPlatformsWithoutPagination(options?: RawAxiosRequestConfig): AxiosPromise<ApiResponse> {
            return localVarFp.getAllPlatformsWithoutPagination(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Platform to cyclop backend
         * @param {PlatformApiUpdatePlatformRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlatform(requestParameters: PlatformApiUpdatePlatformRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updatePlatform(requestParameters.platformId, requestParameters.body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createPlatform operation in PlatformApi.
 * @export
 * @interface PlatformApiCreatePlatformRequest
 */
export interface PlatformApiCreatePlatformRequest {
    /**
     * Platform object that needs to be added
     * @type {Platform}
     * @memberof PlatformApiCreatePlatform
     */
    readonly body: Platform
}

/**
 * Request parameters for getAllPlatforms operation in PlatformApi.
 * @export
 * @interface PlatformApiGetAllPlatformsRequest
 */
export interface PlatformApiGetAllPlatformsRequest {
    /**
     * page number
     * @type {string}
     * @memberof PlatformApiGetAllPlatforms
     */
    readonly pageNum: string
}

/**
 * Request parameters for updatePlatform operation in PlatformApi.
 * @export
 * @interface PlatformApiUpdatePlatformRequest
 */
export interface PlatformApiUpdatePlatformRequest {
    /**
     * platformId
     * @type {string}
     * @memberof PlatformApiUpdatePlatform
     */
    readonly platformId: string

    /**
     * Platform object that needs to be updated
     * @type {Platform}
     * @memberof PlatformApiUpdatePlatform
     */
    readonly body: Platform
}

/**
 * PlatformApi - object-oriented interface
 * @export
 * @class PlatformApi
 * @extends {BaseAPI}
 */
export class PlatformApi extends BaseAPI {
    /**
     * 
     * @summary Create new Platform to cyclop backend
     * @param {PlatformApiCreatePlatformRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformApi
     */
    public createPlatform(requestParameters: PlatformApiCreatePlatformRequest, options?: RawAxiosRequestConfig) {
        return PlatformApiFp(this.configuration).createPlatform(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns platforms
     * @summary Get all Platform
     * @param {PlatformApiGetAllPlatformsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformApi
     */
    public getAllPlatforms(requestParameters: PlatformApiGetAllPlatformsRequest, options?: RawAxiosRequestConfig) {
        return PlatformApiFp(this.configuration).getAllPlatforms(requestParameters.pageNum, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns platforms
     * @summary Get all Platform
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformApi
     */
    public getAllPlatformsWithoutPagination(options?: RawAxiosRequestConfig) {
        return PlatformApiFp(this.configuration).getAllPlatformsWithoutPagination(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Platform to cyclop backend
     * @param {PlatformApiUpdatePlatformRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PlatformApi
     */
    public updatePlatform(requestParameters: PlatformApiUpdatePlatformRequest, options?: RawAxiosRequestConfig) {
        return PlatformApiFp(this.configuration).updatePlatform(requestParameters.platformId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}

