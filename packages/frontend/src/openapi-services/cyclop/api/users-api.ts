/* tslint:disable */
/* eslint-disable */
/**
 * Cyclop APIs
 * Welcome to the Cyclop API service\'s documentation. You can play around with the different API endpoints to familiarise yourself with. --- **Release notes:**   * Improvments in CI/CD   * Platform endpoint   * Update password endpoint   * Profiles Endpoint   * JWT token revogation    * Test coverage improvment 10% - 20%   * Unit tests fix 
 *
 * The version of the OpenAPI document: {version}
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import { ApiResponse } from '../models';
/**
 * USersApi - axios parameter creator
 * @export
 */
export const USersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns Userss
         * @summary Get all Users
         * @param {string} pageNum page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers: async (pageNum: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageNum' is not null or undefined
            assertParamExists('getAllUsers', 'pageNum', pageNum)
            const localVarPath = `/users/{pageNum}`
                .replace(`{${"pageNum"}}`, encodeURIComponent(String(pageNum)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * USersApi - functional programming interface
 * @export
 */
export const USersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = USersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns Userss
         * @summary Get all Users
         * @param {string} pageNum page number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUsers(pageNum: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUsers(pageNum, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['USersApi.getAllUsers']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * USersApi - factory interface
 * @export
 */
export const USersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = USersApiFp(configuration)
    return {
        /**
         * Returns Userss
         * @summary Get all Users
         * @param {USersApiGetAllUsersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUsers(requestParameters: USersApiGetAllUsersRequest, options?: RawAxiosRequestConfig): AxiosPromise<ApiResponse> {
            return localVarFp.getAllUsers(requestParameters.pageNum, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllUsers operation in USersApi.
 * @export
 * @interface USersApiGetAllUsersRequest
 */
export interface USersApiGetAllUsersRequest {
    /**
     * page number
     * @type {string}
     * @memberof USersApiGetAllUsers
     */
    readonly pageNum: string
}

/**
 * USersApi - object-oriented interface
 * @export
 * @class USersApi
 * @extends {BaseAPI}
 */
export class USersApi extends BaseAPI {
    /**
     * Returns Userss
     * @summary Get all Users
     * @param {USersApiGetAllUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof USersApi
     */
    public getAllUsers(requestParameters: USersApiGetAllUsersRequest, options?: RawAxiosRequestConfig) {
        return USersApiFp(this.configuration).getAllUsers(requestParameters.pageNum, options).then((request) => request(this.axios, this.basePath));
    }
}

