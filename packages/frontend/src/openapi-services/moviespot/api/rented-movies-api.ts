/* tslint:disable */
/* eslint-disable */
/**
 * MovieSpot API
 * Especificações da API para o back-end da aplicação MovieSpot
 *
 * The version of the OpenAPI document: 1/
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ApiV1MoviesPost400Response } from '../models';
// @ts-ignore
import { ApiV1RentedMoviesPost201Response } from '../models';
// @ts-ignore
import { ApiV1RentedMoviesPostRequest } from '../models';
/**
 * RentedMoviesApi - axios parameter creator
 * @export
 */
export const RentedMoviesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get All Rented Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RentedMoviesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/rented-movies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Rented Movie by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RentedMoviesIdDelete: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiV1RentedMoviesIdDelete', 'id', id)
            const localVarPath = `/api/v1/rented-movies/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add Rented Movie
         * @param {ApiV1RentedMoviesPostRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RentedMoviesPost: async (body?: ApiV1RentedMoviesPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/rented-movies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User\'s Rented Movies
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RentedMoviesUserIdGet: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiV1RentedMoviesUserIdGet', 'userId', userId)
            const localVarPath = `/api/v1/rented-movies/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RentedMoviesApi - functional programming interface
 * @export
 */
export const RentedMoviesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RentedMoviesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get All Rented Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RentedMoviesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RentedMoviesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete Rented Movie by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RentedMoviesIdDelete(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RentedMoviesIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add Rented Movie
         * @param {ApiV1RentedMoviesPostRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RentedMoviesPost(body?: ApiV1RentedMoviesPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiV1RentedMoviesPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RentedMoviesPost(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get User\'s Rented Movies
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1RentedMoviesUserIdGet(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1RentedMoviesUserIdGet(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RentedMoviesApi - factory interface
 * @export
 */
export const RentedMoviesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RentedMoviesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get All Rented Movies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RentedMoviesGet(options?: AxiosRequestConfig): AxiosPromise<Array<object>> {
            return localVarFp.apiV1RentedMoviesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Rented Movie by ID
         * @param {RentedMoviesApiApiV1RentedMoviesIdDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RentedMoviesIdDelete(requestParameters: RentedMoviesApiApiV1RentedMoviesIdDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.apiV1RentedMoviesIdDelete(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add Rented Movie
         * @param {RentedMoviesApiApiV1RentedMoviesPostRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RentedMoviesPost(requestParameters: RentedMoviesApiApiV1RentedMoviesPostRequest = {}, options?: AxiosRequestConfig): AxiosPromise<ApiV1RentedMoviesPost201Response> {
            return localVarFp.apiV1RentedMoviesPost(requestParameters.body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User\'s Rented Movies
         * @param {RentedMoviesApiApiV1RentedMoviesUserIdGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1RentedMoviesUserIdGet(requestParameters: RentedMoviesApiApiV1RentedMoviesUserIdGetRequest, options?: AxiosRequestConfig): AxiosPromise<Array<object>> {
            return localVarFp.apiV1RentedMoviesUserIdGet(requestParameters.userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiV1RentedMoviesIdDelete operation in RentedMoviesApi.
 * @export
 * @interface RentedMoviesApiApiV1RentedMoviesIdDeleteRequest
 */
export interface RentedMoviesApiApiV1RentedMoviesIdDeleteRequest {
    /**
     * 
     * @type {string}
     * @memberof RentedMoviesApiApiV1RentedMoviesIdDelete
     */
    readonly id: string
}

/**
 * Request parameters for apiV1RentedMoviesPost operation in RentedMoviesApi.
 * @export
 * @interface RentedMoviesApiApiV1RentedMoviesPostRequest
 */
export interface RentedMoviesApiApiV1RentedMoviesPostRequest {
    /**
     * 
     * @type {ApiV1RentedMoviesPostRequest}
     * @memberof RentedMoviesApiApiV1RentedMoviesPost
     */
    readonly body?: ApiV1RentedMoviesPostRequest
}

/**
 * Request parameters for apiV1RentedMoviesUserIdGet operation in RentedMoviesApi.
 * @export
 * @interface RentedMoviesApiApiV1RentedMoviesUserIdGetRequest
 */
export interface RentedMoviesApiApiV1RentedMoviesUserIdGetRequest {
    /**
     * 
     * @type {string}
     * @memberof RentedMoviesApiApiV1RentedMoviesUserIdGet
     */
    readonly userId: string
}

/**
 * RentedMoviesApi - object-oriented interface
 * @export
 * @class RentedMoviesApi
 * @extends {BaseAPI}
 */
export class RentedMoviesApi extends BaseAPI {
    /**
     * 
     * @summary Get All Rented Movies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentedMoviesApi
     */
    public apiV1RentedMoviesGet(options?: AxiosRequestConfig) {
        return RentedMoviesApiFp(this.configuration).apiV1RentedMoviesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Rented Movie by ID
     * @param {RentedMoviesApiApiV1RentedMoviesIdDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentedMoviesApi
     */
    public apiV1RentedMoviesIdDelete(requestParameters: RentedMoviesApiApiV1RentedMoviesIdDeleteRequest, options?: AxiosRequestConfig) {
        return RentedMoviesApiFp(this.configuration).apiV1RentedMoviesIdDelete(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add Rented Movie
     * @param {RentedMoviesApiApiV1RentedMoviesPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentedMoviesApi
     */
    public apiV1RentedMoviesPost(requestParameters: RentedMoviesApiApiV1RentedMoviesPostRequest = {}, options?: AxiosRequestConfig) {
        return RentedMoviesApiFp(this.configuration).apiV1RentedMoviesPost(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User\'s Rented Movies
     * @param {RentedMoviesApiApiV1RentedMoviesUserIdGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RentedMoviesApi
     */
    public apiV1RentedMoviesUserIdGet(requestParameters: RentedMoviesApiApiV1RentedMoviesUserIdGetRequest, options?: AxiosRequestConfig) {
        return RentedMoviesApiFp(this.configuration).apiV1RentedMoviesUserIdGet(requestParameters.userId, options).then((request) => request(this.axios, this.basePath));
    }
}

